{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:3001';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const gameStateAPI = {\n  // Buscar o estado atual do jogo\n  getGameState: async () => {\n    try {\n      const response = await api.get('/gameState');\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar estado do jogo:', error);\n      throw error;\n    }\n  },\n  // Atualizar o estado do jogo\n  updateGameState: async gameState => {\n    try {\n      const updatedState = {\n        ...gameState,\n        lastUpdated: new Date().toISOString()\n      };\n      const response = await api.put('/gameState', updatedState);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao atualizar estado do jogo:', error);\n      throw error;\n    }\n  },\n  // Resetar o jogo para o estado inicial\n  resetGameState: async () => {\n    try {\n      const initialState = {\n        id: 1,\n        homeTeam: {\n          logo: null,\n          name: \"HOME\",\n          score: 0,\n          redCards: 0\n        },\n        awayTeam: {\n          logo: null,\n          name: \"AWAY\",\n          score: 0,\n          redCards: 0\n        },\n        timer: {\n          minutes: 0,\n          seconds: 0,\n          isRunning: false\n        },\n        period: \"1T\",\n        extraTime: 0,\n        penalties: {\n          active: false,\n          homeScore: 0,\n          awayScore: 0\n        },\n        lastUpdated: new Date().toISOString()\n      };\n      const response = await api.put('/gameState', initialState);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao resetar estado do jogo:', error);\n      throw error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","gameStateAPI","getGameState","response","get","data","error","console","updateGameState","gameState","updatedState","lastUpdated","Date","toISOString","put","resetGameState","initialState","id","homeTeam","logo","name","score","redCards","awayTeam","timer","minutes","seconds","isRunning","period","extraTime","penalties","active","homeScore","awayScore"],"sources":["/Users/edbentto/PAINEL-OBS/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:3001';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport const gameStateAPI = {\n  // Buscar o estado atual do jogo\n  getGameState: async () => {\n    try {\n      const response = await api.get('/gameState');\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar estado do jogo:', error);\n      throw error;\n    }\n  },\n\n  // Atualizar o estado do jogo\n  updateGameState: async (gameState) => {\n    try {\n      const updatedState = {\n        ...gameState,\n        lastUpdated: new Date().toISOString()\n      };\n      const response = await api.put('/gameState', updatedState);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao atualizar estado do jogo:', error);\n      throw error;\n    }\n  },\n\n  // Resetar o jogo para o estado inicial\n  resetGameState: async () => {\n    try {\n      const initialState = {\n        id: 1,\n        homeTeam: {\n          logo: null,\n          name: \"HOME\",\n          score: 0,\n          redCards: 0\n        },\n        awayTeam: {\n          logo: null,\n          name: \"AWAY\",\n          score: 0,\n          redCards: 0\n        },\n        timer: {\n          minutes: 0,\n          seconds: 0,\n          isRunning: false\n        },\n        period: \"1T\",\n        extraTime: 0,\n        penalties: {\n          active: false,\n          homeScore: 0,\n          awayScore: 0\n        },\n        lastUpdated: new Date().toISOString()\n      };\n      const response = await api.put('/gameState', initialState);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao resetar estado do jogo:', error);\n      throw error;\n    }\n  }\n};\n\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,uBAAuB;AAE5C,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,YAAY,GAAG;EAC1B;EACAC,YAAY,EAAE,MAAAA,CAAA,KAAY;IACxB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAAC,YAAY,CAAC;MAC5C,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAE,eAAe,EAAE,MAAOC,SAAS,IAAK;IACpC,IAAI;MACF,MAAMC,YAAY,GAAG;QACnB,GAAGD,SAAS;QACZE,WAAW,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACtC,CAAC;MACD,MAAMV,QAAQ,GAAG,MAAMN,GAAG,CAACiB,GAAG,CAAC,YAAY,EAAEJ,YAAY,CAAC;MAC1D,OAAOP,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAS,cAAc,EAAE,MAAAA,CAAA,KAAY;IAC1B,IAAI;MACF,MAAMC,YAAY,GAAG;QACnBC,EAAE,EAAE,CAAC;QACLC,QAAQ,EAAE;UACRC,IAAI,EAAE,IAAI;UACVC,IAAI,EAAE,MAAM;UACZC,KAAK,EAAE,CAAC;UACRC,QAAQ,EAAE;QACZ,CAAC;QACDC,QAAQ,EAAE;UACRJ,IAAI,EAAE,IAAI;UACVC,IAAI,EAAE,MAAM;UACZC,KAAK,EAAE,CAAC;UACRC,QAAQ,EAAE;QACZ,CAAC;QACDE,KAAK,EAAE;UACLC,OAAO,EAAE,CAAC;UACVC,OAAO,EAAE,CAAC;UACVC,SAAS,EAAE;QACb,CAAC;QACDC,MAAM,EAAE,IAAI;QACZC,SAAS,EAAE,CAAC;QACZC,SAAS,EAAE;UACTC,MAAM,EAAE,KAAK;UACbC,SAAS,EAAE,CAAC;UACZC,SAAS,EAAE;QACb,CAAC;QACDtB,WAAW,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACtC,CAAC;MACD,MAAMV,QAAQ,GAAG,MAAMN,GAAG,CAACiB,GAAG,CAAC,YAAY,EAAEE,YAAY,CAAC;MAC1D,OAAOb,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,MAAMA,KAAK;IACb;EACF;AACF,CAAC;AAED,eAAeT,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}